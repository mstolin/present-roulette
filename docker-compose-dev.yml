networks:
  present-roulette: # TODO Add more networks for deeper isolation
    driver: bridge

volumes:
  data:

services:
  frontend:
    build:
      context: frontend/
      dockerfile: Dockerfile-dev
    image: localhost/present-roulette/dev/frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/var/www/html/app/src
      - ./frontend/index.html:/var/www/html/app/index.html
      - ./frontend/vite.config.js:/var/www/html/app/vite.config.js
      - ./frontend/.env:/var/www/html/app/.env

  user-endpoint:
    build:
      context: .
      dockerfile: go-service.Dockerfile
      args:
        - SERVICE_NAME=user-endpoint
        - SERVICE_PROJECT_PATH=./user-endpoint
    image: localhost/present-roulette/user-endpoint
    ports:
      - "8080:8080"
    environment:
      - USER_SERVICE=http://user-service:8080
      - WISHLIST_SERVICE=http://scrapper-facade:8080
      - MAIL_SERVICE=http://mail-adapter:8080

  # gmail-adapter:
  #   build:
  #     context: .
  #     dockerfile: go-service.Dockerfile
  #     args:
  #       - SERVICE_NAME=gmail-adapter
  #       - SERVICE_PROJECT_PATH=./gmail-adapter
  #   image: localhost/present-roulette/gmail-adapter
  #   ports:
  #     - "8043:8080"
  #   env_file:
  #     - env/gmail-adapter.env
  #   environment:
  #     - GMAIL_HOST=smtp.gmail.com
  #     - GMAIL_PORT=587
  #   restart: always
  #   networks:
  #     - present-roulette

  # mail-service:
  #   build:
  #     context: .
  #     dockerfile: go-service.Dockerfile
  #     args:
  #       - SERVICE_NAME=mail-service
  #       - SERVICE_PROJECT_PATH=./mail-service
  #   image: localhost/present-roulette/mail-service
  #   ports:
  #     - "8021:8080"
  #   environment:
  #     - GMAIL_SERVICE=http://gmail-adapter:8080
  #   depends_on:
  #     - gmail-service
  #   restart: always
  #   networks:
  #     - present-roulette

  # amazon-adapter:
  #   build: ./amazon-adapter
  #   image: localhost/present-roulette/amazon-adapter
  #   ports:
  #     - "8042:8080"
  #   environment:
  #     - AMAZON_HOST=http://amazon-clone:8041 # TODO MAKE AMAZON_URL
  #   restart: always
  #   networks:
  #     - present-roulette

  # scrapper-facade:
  #   build:
  #     context: .
  #     dockerfile: go-service.Dockerfile
  #     args:
  #       - SERVICE_NAME=scrapper-facade
  #       - SERVICE_PROJECT_PATH=./scrapper-facade
  #   image: localhost/present-roulette/scrapper-facade
  #   ports:
  #     - "8022:8080"
  #   environment:
  #     - AMAZON_SCRAPPER=http://amazon-scrapper:8080
  #   depends_on:
  #     - amazon-adapter
  #   restart: always
  #   networks:
  #     - present-roulette

  # database-adapter:
  #   build:
  #     context: .
  #     dockerfile: go-service.Dockerfile
  #     args:
  #       - SERVICE_NAME=database-adapter
  #       - SERVICE_PROJECT_PATH=./database-adapter
  #   image: localhost/present-roulette/database-adapter
  #   ports:
  #     - "8023:8080"
  #   environment:
  #     - DB_HOST=database
  #     - DB_PORT=5432
  #     - DB_USER=admin
  #     - DB_PASSWORD=admin123
  #     - DB_NAME=present-roulette
  #   depends_on:
  #     - database
  #   restart: always
  #   networks:
  #     - present-roulette

  # database:
  #   build: ./database
  #   image: localhost/present-roulette/postgres-database
  #   environment:
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=admin123
  #     - POSTGRES_DB=present-roulette
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - data:/var/lib/postgresql/data
  #   restart: always
  #   networks:
  #     - present-roulette

  # amazon-clone:
  #   image: nginx:latest
  #   privileged: true # Give access to filesystem
  #   ports:
  #     - "8041:8041"
  #   #environment:
  #   #  - NGINX_HOST=foobar.com
  #   #  - NGINX_PORT=80
  #   volumes:
  #     - ./amazon-clone/nginx/html:/usr/share/nginx/html
  #     - ./amazon-clone/nginx/nginx.conf:/etc/nginx/nginx.conf
  #   restart: always
  #   networks:
  #     - present-roulette